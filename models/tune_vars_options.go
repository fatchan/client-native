// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TuneVarsOptions tune vars options
//
// swagger:model tune_vars_options
type TuneVarsOptions struct {

	// global max size
	GlobalMaxSize *int64 `json:"global_max_size,omitempty"`

	// proc max size
	ProcMaxSize *int64 `json:"proc_max_size,omitempty"`

	// reqres max size
	ReqresMaxSize *int64 `json:"reqres_max_size,omitempty"`

	// sess max size
	SessMaxSize *int64 `json:"sess_max_size,omitempty"`

	// txn max size
	TxnMaxSize *int64 `json:"txn_max_size,omitempty"`
}

// Validate validates this tune vars options
func (m *TuneVarsOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tune vars options based on context it is used
func (m *TuneVarsOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TuneVarsOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TuneVarsOptions) UnmarshalBinary(b []byte) error {
	var res TuneVarsOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
